name: pull-module
run-name: ${{ github.actor }} is pulling module

on:
  workflow_dispatch:
    inputs:
      module_name: 
        description: 'Module/Submodule name to pull'
        default: 'imputation'
        required: true
        type: string

      repo_type:
        description: 'Type of repo'
        default: 'module'
        required: true
        type: choice
        options:
        - module
        - subworkflow
  
  workflow_call:
    inputs:
      module_name: 
        description: 'Module/Submodule name to pull'
        required: true
        type: string

      repo_type:
        description: 'Type of repo'
        required: true
        type: string

jobs:
  pulling_module:
    runs-on: ubuntu-20.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Prepare global variables
        run: |
          echo "MODULE_LINK=git@github.com:KTest-VN/${{ github.event.inputs.module_name }}.git" >> $GITHUB_ENV
          echo "MODULE_NAME=${{ github.event.inputs.module_name }}" >> $GITHUB_ENV

      - name: Check whether the module is created.
        run: |
          if [ -d "./modules/ktest/${{ env.MODULE_NAME }}" ]; then
            echo "MODULE_EXIS=1" >> $GITHUB_ENV
          else
            echo "MODULE_EXIS=0" >> $GITHUB_ENV
          fi   
      
      - name: Clean module if exis
        if: ${{ env.MODULE_EXIS }}
        run: rm -rf ./modules/ktest/${{ env.MODULE_NAME }}

      - name: Clone the module
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch
          git clone ${{ env.MODULE_LINK }} ./modules/ktest/${{ env.MODULE_NAME }}
      
      - name: Clean git of module
        run: |
          rm -rf ./modules/ktest/${{ env.MODULE_NAME }}/.git/

      - name: Get last commit of module
        run: |
          cd ./modules/ktest/${{ env.MODULE_NAME }}
          LATEST_COMMIT=`git log -n 1 origin/main --pretty=format:"%H"`
          echo "LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV

      - name: Commit changes
        run: |
          git reset
          git add ./modules/ktest/${{ env.MODULE_NAME }}
          git commit -m "${{ github.actor }} add module ${{ env.MODULE_NAME }} from KTest-VN/${{ env.MODULE_NAME }}@${{ env.LATEST_COMMIT }}"
      
      - name: Push changes
        run: git push origin main
          
